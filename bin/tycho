#!/bin/bash

################################################################
##
## Tycho compiles and runs docker-compose distributed systems
## in orchestrator backplanes like Kubernetes.
##
##   This is the Bash command line interface (CLI) for Tycho.
##   
##   author: steven cox
##   version: 0.1
##   usage:
##      
##     up: 
##      
##       tycho up -f <docker-compose>
##       ex: tycho up -f tycho/samples/jupyter-ds/docker-compose.yaml
##      
##     status:
##      
##       tycho status [--terse] [--trace]
##       ex: tycho status
##      
##     down:
##      
##       tycho down <GUID>
##       ex: tycho down $(tycho status --terse)
##   
################################################################
set -e

##
## Get our location and configure the path.
##
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
TYCHO_ROOT=$( dirname $DIR )
export PYTHONPATH=$TYCHO_ROOT
export TYCHO=$TYCHO_ROOT/tycho

##
## Run the API. 
##
api () {
    which minikube >> /dev/null && \
        minikube status | grep -c "apiserver: Running" >> /dev/null && \
        export TYCHO_ON_MINIKUBE=true
    echo TOM: $TYCHO_ON_MINIKUBE
    python $TYCHO/api.py $*
}

##
## Bring a service up.
##
up () {
    python $TYCHO/client.py --up $*
}

##
## Shut a service down.
##
down () {
    python $TYCHO/client.py --down $*
}

##
## Get status for a service.
##
status () {
    python $TYCHO/client.py --status $*
}

##
## Run tests.
##
test () {
    pytest $TYCHO/test $* #--log-format="%(asctime)s %(levelname)s %(message)s" $*
}

$*

exit 0
