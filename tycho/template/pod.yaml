---
#
#  A Kubernetes Pod manifest template. Projects a
#  Tycho system object into a YAML pod definition.
#  Tags the object with a system unique
#  GUID label to enable later management.
#
#  Generated by Tycho {{ now() }}
#
apiVersion: v1
kind: Pod
metadata:
  name: {{ system.name }}
  labels:
    name: {{ system.name }}
    username: {{ system.username }}
    executor: tycho
    tycho-guid: {{ system.identifier }}
    tycho-app-id: {{ system.app_id }}
spec:
{% if system.serviceaccount %}
  serviceAccountName: {{system.serviceaccount}}
{% endif %}
{% for container in system.containers %}
  {% if container.limits or container.requests %}
  {% if container.limits.gpus != None and loop.first %}
  nodeSelector:
    nvidia.com/gpu: "true"
  tolerations:
  - key: "nvidia.com/gpu"
    operator: "Exists"
    effect: "NoSchedule"
  {% endif %}
  {% endif %}
{% endfor %}
#  initContainers:
#{% for container in system.containers %}
#  {% if container.depends_on|length > 0 %}
#  {% for d in container.depends_on %}
#  - name: init-{{ container.name}}-{{loop.index}}
#    image: busybox:1.28
#    command: ['sh', '-c', 'until nslookup {{d}}-{{system.identifier}}; do echo waiting for mydb; sleep 2; done;']
#  {% endfor %}
#  {% endif %}
#{% endfor %}
  initContainers:
  - name: volume-permissions
    image: busybox:1.28
    command: ['sh', '-c', 'chmod 777 -R /home/{{system.username}} && echo OK']
    volumeMounts:
    - name: stdnfs
      mountPath: /home/{{system.username}}
      subPath: {{system.username}}
  containers:
{% for container in system.containers %}    
  - name: {{ container.name }}
    image: {{ container.image }}
{% if container.command %}
    command: {{ container.command }}
{% endif %}
{% if container.env %}
    env:
    {%for e in container.env %}
    - name : {{ e[0] }}
      value : "{{ e[1] }}"
    {% endfor %}
    - name : GUID
      value: {{ system.identifier }}
    {% if system.amb %}
    - name: NB_PREFIX
      value: /private/{{system.system_name}}/{{system.username}}/{{system.identifier}}
    {% else %}
    - name: NB_PREFIX
      value: /
    {% endif %}
{% endif %}
{% if not container.env %}
    env:
    - name : GUID
      value: {{ system.identifier }}
    {% if system.amb %}
    - name: NB_PREFIX
      value: /private/{{system.system_name}}/{{system.username}}/{{system.identifier}}
    {% else %}
    - name: NB_PREFIX
      value: /                                                                        
    {% endif %}
{% endif %}
{% if container.expose|length > 0 %}
    ports:
{% for port in container.expose %}
    - containerPort: {{ container.expose[loop.index-1]['containerPort'] }}
      protocol: TCP
{% endfor %}     
{% endif %} # ports
{% if container.limits or container.requests %}
    resources:
      {% if container.limits %}
      {% if container.limits.cpus != None %}
      limits:
        cpu: "{{ container.limits.cpus }}"
        # https://kubernetes.io/docs/tasks/manage-gpus/scheduling-gpus/
        #nvidia.com/gpu: "{{ container.limits.gpus }}"
        memory: "{{ container.limits.memory }}"
      {% endif %}
      {% endif %}
      {% if container.requests  %}
      {% if container.requests.cpus != None %}
      requests:
        cpu: "{{ container.requests.cpus }}"
        memory: "{{ container.requests.memory }}"
      {% endif %}
      {% endif %}
      {% if container.limits.gpus != None %}
      limits:
        nvidia.com/gpu: {{ container.limits.gpus }}
        memory: {{ container.limits.memory }}
      {% endif %}
{% endif %}
    volumeMounts:
{% if container.volumes %}
{% for volume in system.volumes %}
  {% if container.name == volume['container_name'] %}
    - name: {{ volume["volume_name"] }}
      mountPath: {{ volume["path"] }}
      subPath: {{ volume["subpath"] }}
      readOnly: false
  {% endif %}
  {% endfor %}
  {% endif %}
{% endfor %}

  volumes:
# Changes
{% for container in system.containers %}
{% if container.volumes %}
{% for volume in system.volumes %}
  {% if container.name == volume['container_name']%}
  {% if volume["pvc_name"] != None %}
    - name: {{ volume["volume_name"] }}
      persistentVolumeClaim:
        claimName: {{ volume["pvc_name"] }}
  {% endif %}
  {% endif %}
  {% endfor %}
  {% endif %}
  {% endfor %}

